
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
//import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Gelay
 */
public class dashboard extends javax.swing.JFrame {

    /**
     * Creates new form dashboard
     */ 
    
    Color defaultColor, clickedColor;
    view_cart viewCart1;
    view_cart viewCart2;
    
    JTable table;
    TableCellRenderer tableRenderer;
    JScrollPane scrollPane;
    
    private String user_id;
    
    private String order_id;
    
    static Boolean abler = true;
    
    static int orderID;
    
    
    
    public dashboard() {
        initComponents();
        defaultColor = new Color(227,0,0);
        clickedColor = new Color(255,0,0);
        dashboard.setBackground(clickedColor);
        addRowToTableList();
//        addItemtoComboBox();
        
        Runnable refreshDatas = new Runnable() {
        public void run() {
//        addTotalAmountToTable1();
//        addTotalAmountToTable2();  
//        addTotalAmountToTable3();
        addRowToListOrderQueueTable();
//        addDefaultRowToMenuList();
        notifyCashierEvents();
        retrieveKitchenLogs();
            System.out.println("refreshed.");
        }
        };
//        
        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
        executor.scheduleAtFixedRate(refreshDatas, 0, 5, TimeUnit.SECONDS);
        
        productBundle.hide();
    }
    
    public dashboard(String user_id) {
        initComponents();
        defaultColor = new Color(227,0,0);
        clickedColor = new Color(255,0,0);
        dashboard.setBackground(clickedColor);
        this.user_id = user_id;
//        addItemtoComboBox();
        addRowToTableList();
        Runnable refreshDatas = new Runnable() {
        public void run() {
//        addTotalAmountToTable1();
//        addTotalAmountToTable2();  
//        addTotalAmountToTable3();
        addRowToListOrderQueueTable();
//        addDefaultRowToMenuList();
        notifyCashierEvents();
        retrieveKitchenLogs();
            System.out.println("refreshed.");
        }
        };
//        
        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
        executor.scheduleAtFixedRate(refreshDatas, 0, 5, TimeUnit.SECONDS);
        
        productBundle.hide();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sidePane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dashboard = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        menu = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        logout = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        notification_table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        dashboard_tab = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane6 = new javax.swing.JScrollPane();
        table_list = new javax.swing.JTable();
        btn_refresh = new javax.swing.JButton();
        menu_tab = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        menu_list = new javax.swing.JTable();
        btn_shawarma_category = new roundPanel();
        lbl_shawarma = new javax.swing.JLabel();
        icon_shawarma = new javax.swing.JLabel();
        shawarma_border_selected = new javax.swing.JPanel();
        btn_drinks_category = new roundPanel();
        label_drinks = new javax.swing.JLabel();
        icon_Drinks = new javax.swing.JLabel();
        drinks_border_selected = new javax.swing.JPanel();
        btn_chicken_category = new roundPanel();
        label_chicken = new javax.swing.JLabel();
        icon_chicken = new javax.swing.JLabel();
        chicken_border_selected = new javax.swing.JPanel();
        btn_rice_bowl_category = new roundPanel();
        jLabel31 = new javax.swing.JLabel();
        icon_bowl = new javax.swing.JLabel();
        rice_bowl_border_selected = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        remove_order = new javax.swing.JLabel();
        order_user = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_orders = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        order_total_amount = new javax.swing.JLabel();
        btn_checkout = new roundPanel();
        place_order = new javax.swing.JLabel();
        productBundle = new javax.swing.JRadioButton();
        btn_add_ons_category = new roundPanel();
        label_add_ons = new javax.swing.JLabel();
        icon_add_ons = new javax.swing.JLabel();
        add_ons_border_selected = new javax.swing.JPanel();
        order_queue_tab = new javax.swing.JPanel();
        jSeparator5 = new javax.swing.JSeparator();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        menu_list1 = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        order_detail_tableNo = new javax.swing.JComboBox<>();
        jLabel44 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        order_breakdown = new javax.swing.JTable();
        btn_reject = new roundPanel();
        jLabel42 = new javax.swing.JLabel();
        btn_accept = new roundPanel();
        jLabel45 = new javax.swing.JLabel();
        btn_done = new roundPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("6.14Foodhub - Dashboard");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sidePane.setBackground(new java.awt.Color(198, 0, 0));
        sidePane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mainlogo_thumbnail.png"))); // NOI18N
        sidePane.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 340, 210));

        dashboard.setBackground(new java.awt.Color(227, 0, 0));
        dashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dashboardMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dashboardMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dashboardMouseReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dashboard_logo.png"))); // NOI18N
        jLabel12.setText("        Dashboard");

        javax.swing.GroupLayout dashboardLayout = new javax.swing.GroupLayout(dashboard);
        dashboard.setLayout(dashboardLayout);
        dashboardLayout.setHorizontalGroup(
            dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dashboardLayout.createSequentialGroup()
                .addGap(0, 43, Short.MAX_VALUE)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        dashboardLayout.setVerticalGroup(
            dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        sidePane.add(dashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 360, 70));

        menu.setBackground(new java.awt.Color(227, 0, 0));
        menu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                menuMouseReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/menu_logo.png"))); // NOI18N
        jLabel2.setText("        Menu");

        javax.swing.GroupLayout menuLayout = new javax.swing.GroupLayout(menu);
        menu.setLayout(menuLayout);
        menuLayout.setHorizontalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuLayout.createSequentialGroup()
                .addGap(0, 43, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        menuLayout.setVerticalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
        );

        sidePane.add(menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 360, 70));

        logout.setBackground(new java.awt.Color(227, 0, 0));
        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logoutMousePressed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logout_logo.png"))); // NOI18N
        jLabel13.setText("        Logout");

        javax.swing.GroupLayout logoutLayout = new javax.swing.GroupLayout(logout);
        logout.setLayout(logoutLayout);
        logoutLayout.setHorizontalGroup(
            logoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logoutLayout.createSequentialGroup()
                .addGap(0, 44, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        logoutLayout.setVerticalGroup(
            logoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        sidePane.add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 930, 360, 70));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(208, 0, 0), java.awt.Color.lightGray));

        notification_table.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        notification_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Table No.", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        notification_table.setGridColor(new java.awt.Color(230, 0, 0));
        notification_table.setRowHeight(60);
        notification_table.setRowMargin(10);
        notification_table.setSelectionBackground(new java.awt.Color(255, 153, 153));
        notification_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        notification_table.setShowVerticalLines(false);
        notification_table.getTableHeader().setResizingAllowed(false);
        notification_table.getTableHeader().setReorderingAllowed(false);
        notification_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notification_tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(notification_table);
        if (notification_table.getColumnModel().getColumnCount() > 0) {
            notification_table.getColumnModel().getColumn(0).setResizable(false);
            notification_table.getColumnModel().getColumn(0).setPreferredWidth(20);
            notification_table.getColumnModel().getColumn(1).setResizable(false);
        }

        sidePane.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 320, 490));

        getContentPane().add(sidePane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 360, 1020));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 20));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1450, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 1450, 10));

        dashboard_tab.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 48)); // NOI18N
        jLabel6.setText("DASHBOARD");

        jSeparator1.setBackground(new java.awt.Color(255, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(255, 0, 0));
        jSeparator1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jSeparator1.setPreferredSize(new java.awt.Dimension(0, 5));

        jScrollPane6.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane6.setBorder(null);
        jScrollPane6.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane6.setOpaque(false);

        table_list.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        table_list.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Table No.", "Total Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_list.setGridColor(new java.awt.Color(230, 0, 0));
        table_list.setIntercellSpacing(new java.awt.Dimension(10, 10));
        table_list.setRowHeight(100);
        table_list.setSelectionBackground(new java.awt.Color(255, 171, 171));
        table_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_list.setShowVerticalLines(false);
        table_list.setSurrendersFocusOnKeystroke(true);
        table_list.getTableHeader().setResizingAllowed(false);
        table_list.getTableHeader().setReorderingAllowed(false);
        table_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_listMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(table_list);
        if (table_list.getColumnModel().getColumnCount() > 0) {
            table_list.getColumnModel().getColumn(0).setResizable(false);
            table_list.getColumnModel().getColumn(0).setPreferredWidth(30);
            table_list.getColumnModel().getColumn(1).setResizable(false);
            table_list.getColumnModel().getColumn(1).setPreferredWidth(30);
            table_list.getColumnModel().getColumn(2).setResizable(false);
        }

        btn_refresh.setBackground(new java.awt.Color(255, 0, 0));
        btn_refresh.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_refresh.setForeground(new java.awt.Color(255, 255, 255));
        btn_refresh.setText("Refresh");
        btn_refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_refreshMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout dashboard_tabLayout = new javax.swing.GroupLayout(dashboard_tab);
        dashboard_tab.setLayout(dashboard_tabLayout);
        dashboard_tabLayout.setHorizontalGroup(
            dashboard_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dashboard_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dashboard_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(dashboard_tabLayout.createSequentialGroup()
                        .addGroup(dashboard_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 429, Short.MAX_VALUE)
                        .addComponent(btn_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        dashboard_tabLayout.setVerticalGroup(
            dashboard_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dashboard_tabLayout.createSequentialGroup()
                .addGroup(dashboard_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dashboard_tabLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dashboard_tabLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(btn_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 769, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", dashboard_tab);

        menu_tab.setOpaque(false);

        jLabel14.setFont(new java.awt.Font("Century Gothic", 1, 48)); // NOI18N
        jLabel14.setText("MENU");

        jSeparator3.setBackground(new java.awt.Color(255, 0, 0));
        jSeparator3.setForeground(new java.awt.Color(255, 0, 0));
        jSeparator3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jSeparator3.setPreferredSize(new java.awt.Dimension(0, 5));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        menu_list.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        menu_list.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Product Name", "Price", "Bundled Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menu_list.setGridColor(new java.awt.Color(230, 0, 0));
        menu_list.setIntercellSpacing(new java.awt.Dimension(10, 10));
        menu_list.setRowHeight(80);
        menu_list.setSelectionBackground(new java.awt.Color(255, 171, 171));
        menu_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        menu_list.setShowVerticalLines(false);
        menu_list.setSurrendersFocusOnKeystroke(true);
        menu_list.getTableHeader().setResizingAllowed(false);
        menu_list.getTableHeader().setReorderingAllowed(false);
        menu_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_listMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(menu_list);
        if (menu_list.getColumnModel().getColumnCount() > 0) {
            menu_list.getColumnModel().getColumn(0).setResizable(false);
            menu_list.getColumnModel().getColumn(0).setPreferredWidth(250);
            menu_list.getColumnModel().getColumn(1).setResizable(false);
            menu_list.getColumnModel().getColumn(1).setPreferredWidth(10);
            menu_list.getColumnModel().getColumn(2).setResizable(false);
        }

        btn_shawarma_category.setBackground(new java.awt.Color(255, 255, 255));
        btn_shawarma_category.setRoundBottomLeft(10);
        btn_shawarma_category.setRoundBottomRight(10);
        btn_shawarma_category.setRoundTopLeft(10);
        btn_shawarma_category.setRoundTopRight(10);
        btn_shawarma_category.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_shawarma_categoryMouseClicked(evt);
            }
        });
        btn_shawarma_category.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_shawarma.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbl_shawarma.setForeground(new java.awt.Color(255, 0, 0));
        lbl_shawarma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_shawarma.setText("Shawarma");
        btn_shawarma_category.add(lbl_shawarma, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 100, 21));

        icon_shawarma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        icon_shawarma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/shawarmalogo.png"))); // NOI18N
        icon_shawarma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                icon_shawarmaMouseClicked(evt);
            }
        });
        btn_shawarma_category.add(icon_shawarma, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, -10, 100, 120));

        shawarma_border_selected.setBackground(new java.awt.Color(255, 255, 255));
        shawarma_border_selected.setOpaque(false);
        shawarma_border_selected.setPreferredSize(new java.awt.Dimension(117, 121));
        shawarma_border_selected.setRequestFocusEnabled(false);

        javax.swing.GroupLayout shawarma_border_selectedLayout = new javax.swing.GroupLayout(shawarma_border_selected);
        shawarma_border_selected.setLayout(shawarma_border_selectedLayout);
        shawarma_border_selectedLayout.setHorizontalGroup(
            shawarma_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );
        shawarma_border_selectedLayout.setVerticalGroup(
            shawarma_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );

        btn_shawarma_category.add(shawarma_border_selected, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 120, 140));

        btn_drinks_category.setBackground(new java.awt.Color(255, 255, 255));
        btn_drinks_category.setRoundBottomLeft(10);
        btn_drinks_category.setRoundBottomRight(10);
        btn_drinks_category.setRoundTopLeft(10);
        btn_drinks_category.setRoundTopRight(10);

        label_drinks.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        label_drinks.setForeground(new java.awt.Color(255, 0, 0));
        label_drinks.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_drinks.setText("Drinks");

        icon_Drinks.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        icon_Drinks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bevlogo.png"))); // NOI18N
        icon_Drinks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                icon_DrinksMouseClicked(evt);
            }
        });

        drinks_border_selected.setBackground(new java.awt.Color(255, 255, 255));
        drinks_border_selected.setOpaque(false);
        drinks_border_selected.setPreferredSize(new java.awt.Dimension(117, 121));
        drinks_border_selected.setRequestFocusEnabled(false);

        javax.swing.GroupLayout drinks_border_selectedLayout = new javax.swing.GroupLayout(drinks_border_selected);
        drinks_border_selected.setLayout(drinks_border_selectedLayout);
        drinks_border_selectedLayout.setHorizontalGroup(
            drinks_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 117, Short.MAX_VALUE)
        );
        drinks_border_selectedLayout.setVerticalGroup(
            drinks_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 133, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout btn_drinks_categoryLayout = new javax.swing.GroupLayout(btn_drinks_category);
        btn_drinks_category.setLayout(btn_drinks_categoryLayout);
        btn_drinks_categoryLayout.setHorizontalGroup(
            btn_drinks_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label_drinks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(icon_Drinks, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
            .addGroup(btn_drinks_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(drinks_border_selected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btn_drinks_categoryLayout.setVerticalGroup(
            btn_drinks_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btn_drinks_categoryLayout.createSequentialGroup()
                .addComponent(icon_Drinks, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_drinks, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(btn_drinks_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btn_drinks_categoryLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(drinks_border_selected, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)))
        );

        btn_chicken_category.setBackground(new java.awt.Color(255, 255, 255));
        btn_chicken_category.setRoundBottomLeft(10);
        btn_chicken_category.setRoundBottomRight(10);
        btn_chicken_category.setRoundTopLeft(10);
        btn_chicken_category.setRoundTopRight(10);

        label_chicken.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        label_chicken.setForeground(new java.awt.Color(255, 0, 0));
        label_chicken.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_chicken.setText("Chicken");

        icon_chicken.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        icon_chicken.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wingslogo.png"))); // NOI18N
        icon_chicken.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                icon_chickenMouseClicked(evt);
            }
        });

        chicken_border_selected.setBackground(new java.awt.Color(255, 255, 255));
        chicken_border_selected.setOpaque(false);
        chicken_border_selected.setPreferredSize(new java.awt.Dimension(117, 121));
        chicken_border_selected.setRequestFocusEnabled(false);

        javax.swing.GroupLayout chicken_border_selectedLayout = new javax.swing.GroupLayout(chicken_border_selected);
        chicken_border_selected.setLayout(chicken_border_selectedLayout);
        chicken_border_selectedLayout.setHorizontalGroup(
            chicken_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 117, Short.MAX_VALUE)
        );
        chicken_border_selectedLayout.setVerticalGroup(
            chicken_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 133, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout btn_chicken_categoryLayout = new javax.swing.GroupLayout(btn_chicken_category);
        btn_chicken_category.setLayout(btn_chicken_categoryLayout);
        btn_chicken_categoryLayout.setHorizontalGroup(
            btn_chicken_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(icon_chicken, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
            .addComponent(label_chicken, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(btn_chicken_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(chicken_border_selected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btn_chicken_categoryLayout.setVerticalGroup(
            btn_chicken_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btn_chicken_categoryLayout.createSequentialGroup()
                .addComponent(icon_chicken, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_chicken, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(btn_chicken_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btn_chicken_categoryLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(chicken_border_selected, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)))
        );

        btn_rice_bowl_category.setBackground(new java.awt.Color(255, 255, 255));
        btn_rice_bowl_category.setRoundBottomLeft(10);
        btn_rice_bowl_category.setRoundBottomRight(10);
        btn_rice_bowl_category.setRoundTopLeft(10);
        btn_rice_bowl_category.setRoundTopRight(10);

        jLabel31.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 0, 0));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("Rice Bowl");

        icon_bowl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        icon_bowl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bowllogo.png"))); // NOI18N
        icon_bowl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                icon_bowlMouseClicked(evt);
            }
        });

        rice_bowl_border_selected.setBackground(new java.awt.Color(255, 255, 255));
        rice_bowl_border_selected.setOpaque(false);
        rice_bowl_border_selected.setPreferredSize(new java.awt.Dimension(117, 121));
        rice_bowl_border_selected.setRequestFocusEnabled(false);

        javax.swing.GroupLayout rice_bowl_border_selectedLayout = new javax.swing.GroupLayout(rice_bowl_border_selected);
        rice_bowl_border_selected.setLayout(rice_bowl_border_selectedLayout);
        rice_bowl_border_selectedLayout.setHorizontalGroup(
            rice_bowl_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        rice_bowl_border_selectedLayout.setVerticalGroup(
            rice_bowl_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 146, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout btn_rice_bowl_categoryLayout = new javax.swing.GroupLayout(btn_rice_bowl_category);
        btn_rice_bowl_category.setLayout(btn_rice_bowl_categoryLayout);
        btn_rice_bowl_categoryLayout.setHorizontalGroup(
            btn_rice_bowl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(icon_bowl, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
            .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(btn_rice_bowl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(btn_rice_bowl_categoryLayout.createSequentialGroup()
                    .addComponent(rice_bowl_border_selected, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        btn_rice_bowl_categoryLayout.setVerticalGroup(
            btn_rice_bowl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btn_rice_bowl_categoryLayout.createSequentialGroup()
                .addComponent(icon_bowl, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(btn_rice_bowl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(rice_bowl_border_selected, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel4.setOpaque(false);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setOpaque(false);
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel17.setText("Order List");
        jPanel7.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 187, 65));

        remove_order.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        remove_order.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/remove_logo.png"))); // NOI18N
        remove_order.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remove_orderMouseClicked(evt);
            }
        });
        jPanel7.add(remove_order, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 41, 52));

        order_user.setBackground(new java.awt.Color(255, 12, 19));
        order_user.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        order_user.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "take-out", "dine-in" }));
        jPanel7.add(order_user, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 390, 40));

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(null);

        list_orders.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        list_orders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Qty", "Product", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        list_orders.setGridColor(new java.awt.Color(255, 255, 255));
        list_orders.setIntercellSpacing(new java.awt.Dimension(10, 10));
        list_orders.setRowHeight(60);
        list_orders.setSelectionBackground(new java.awt.Color(255, 171, 171));
        list_orders.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        list_orders.setShowVerticalLines(false);
        list_orders.setSurrendersFocusOnKeystroke(true);
        list_orders.getTableHeader().setResizingAllowed(false);
        list_orders.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(list_orders);
        if (list_orders.getColumnModel().getColumnCount() > 0) {
            list_orders.getColumnModel().getColumn(0).setResizable(false);
            list_orders.getColumnModel().getColumn(1).setResizable(false);
            list_orders.getColumnModel().getColumn(1).setPreferredWidth(200);
            list_orders.getColumnModel().getColumn(2).setResizable(false);
            list_orders.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setText("Total Amount :");

        order_total_amount.setBackground(new java.awt.Color(255, 255, 255));
        order_total_amount.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        order_total_amount.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        order_total_amount.setText("-");

        btn_checkout.setBackground(new java.awt.Color(255, 0, 0));
        btn_checkout.setForeground(new java.awt.Color(255, 255, 255));
        btn_checkout.setToolTipText("");
        btn_checkout.setRoundBottomLeft(30);
        btn_checkout.setRoundBottomRight(30);
        btn_checkout.setRoundTopLeft(30);
        btn_checkout.setRoundTopRight(30);
        btn_checkout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_checkoutMouseClicked(evt);
            }
        });

        place_order.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        place_order.setForeground(new java.awt.Color(255, 255, 255));
        place_order.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        place_order.setText("Place Order");

        javax.swing.GroupLayout btn_checkoutLayout = new javax.swing.GroupLayout(btn_checkout);
        btn_checkout.setLayout(btn_checkoutLayout);
        btn_checkoutLayout.setHorizontalGroup(
            btn_checkoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(place_order, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        btn_checkoutLayout.setVerticalGroup(
            btn_checkoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(place_order, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
        );

        productBundle.setText("jRadioButton1");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(productBundle)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(order_total_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btn_checkout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(order_total_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(btn_checkout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productBundle)
                .addGap(46, 46, 46))
        );

        btn_add_ons_category.setBackground(new java.awt.Color(255, 255, 255));
        btn_add_ons_category.setRoundBottomLeft(10);
        btn_add_ons_category.setRoundBottomRight(10);
        btn_add_ons_category.setRoundTopLeft(10);
        btn_add_ons_category.setRoundTopRight(10);

        label_add_ons.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        label_add_ons.setForeground(new java.awt.Color(255, 0, 0));
        label_add_ons.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_add_ons.setText("Add Ons");

        icon_add_ons.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        icon_add_ons.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addonslogo.png"))); // NOI18N
        icon_add_ons.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                icon_add_onsMouseClicked(evt);
            }
        });

        add_ons_border_selected.setBackground(new java.awt.Color(255, 255, 255));
        add_ons_border_selected.setOpaque(false);
        add_ons_border_selected.setPreferredSize(new java.awt.Dimension(117, 121));
        add_ons_border_selected.setRequestFocusEnabled(false);

        javax.swing.GroupLayout add_ons_border_selectedLayout = new javax.swing.GroupLayout(add_ons_border_selected);
        add_ons_border_selected.setLayout(add_ons_border_selectedLayout);
        add_ons_border_selectedLayout.setHorizontalGroup(
            add_ons_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 117, Short.MAX_VALUE)
        );
        add_ons_border_selectedLayout.setVerticalGroup(
            add_ons_border_selectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 133, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout btn_add_ons_categoryLayout = new javax.swing.GroupLayout(btn_add_ons_category);
        btn_add_ons_category.setLayout(btn_add_ons_categoryLayout);
        btn_add_ons_categoryLayout.setHorizontalGroup(
            btn_add_ons_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label_add_ons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(icon_add_ons, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
            .addGroup(btn_add_ons_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(add_ons_border_selected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btn_add_ons_categoryLayout.setVerticalGroup(
            btn_add_ons_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btn_add_ons_categoryLayout.createSequentialGroup()
                .addComponent(icon_add_ons, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_add_ons, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(btn_add_ons_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btn_add_ons_categoryLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(add_ons_border_selected, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout menu_tabLayout = new javax.swing.GroupLayout(menu_tab);
        menu_tab.setLayout(menu_tabLayout);
        menu_tabLayout.setHorizontalGroup(
            menu_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menu_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menu_tabLayout.createSequentialGroup()
                        .addGroup(menu_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(menu_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(menu_tabLayout.createSequentialGroup()
                                    .addComponent(btn_shawarma_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_rice_bowl_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_chicken_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_drinks_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_add_ons_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(823, 823, 823))
        );
        menu_tabLayout.setVerticalGroup(
            menu_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_tabLayout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(menu_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_drinks_category, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_chicken_category, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_rice_bowl_category, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_shawarma_category, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_add_ons_category, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
            .addGroup(menu_tabLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 961, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", menu_tab);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 0, 1090, 1000));

        order_queue_tab.setOpaque(false);
        order_queue_tab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jSeparator5.setBackground(new java.awt.Color(255, 0, 0));
        jSeparator5.setForeground(new java.awt.Color(255, 0, 0));
        jSeparator5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jSeparator5.setPreferredSize(new java.awt.Dimension(0, 5));
        order_queue_tab.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 116, 430, 25));

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 3));
        jPanel10.setOpaque(false);
        jPanel10.setPreferredSize(new java.awt.Dimension(474, 1000));

        jScrollPane4.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane4.setBorder(null);
        jScrollPane4.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane4.setOpaque(false);

        menu_list1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        menu_list1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order #", "Username", "Quantity", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menu_list1.setGridColor(new java.awt.Color(230, 0, 0));
        menu_list1.setIntercellSpacing(new java.awt.Dimension(10, 10));
        menu_list1.setRowHeight(50);
        menu_list1.setSelectionBackground(new java.awt.Color(255, 171, 171));
        menu_list1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        menu_list1.setShowVerticalLines(false);
        menu_list1.setSurrendersFocusOnKeystroke(true);
        menu_list1.getTableHeader().setResizingAllowed(false);
        menu_list1.getTableHeader().setReorderingAllowed(false);
        menu_list1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_list1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(menu_list1);
        if (menu_list1.getColumnModel().getColumnCount() > 0) {
            menu_list1.getColumnModel().getColumn(0).setResizable(false);
            menu_list1.getColumnModel().getColumn(0).setPreferredWidth(30);
            menu_list1.getColumnModel().getColumn(1).setResizable(false);
            menu_list1.getColumnModel().getColumn(2).setResizable(false);
            menu_list1.getColumnModel().getColumn(2).setPreferredWidth(30);
            menu_list1.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setOpaque(false);

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setOpaque(false);

        jLabel43.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel43.setText("Order Details");

        order_detail_tableNo.setBackground(new java.awt.Color(255, 12, 19));
        order_detail_tableNo.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        order_detail_tableNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "take-out", "dine-in" }));
        order_detail_tableNo.setSelectedIndex(-1);
        order_detail_tableNo.setEnabled(false);

        jLabel44.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel44.setText("Queue #");

        jScrollPane5.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane5.setBorder(null);

        order_breakdown.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        order_breakdown.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Qty", "Product"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        order_breakdown.setEnabled(false);
        order_breakdown.setGridColor(new java.awt.Color(255, 255, 255));
        order_breakdown.setIntercellSpacing(new java.awt.Dimension(10, 10));
        order_breakdown.setRowHeight(30);
        order_breakdown.setRowSelectionAllowed(false);
        order_breakdown.setSelectionBackground(new java.awt.Color(255, 153, 153));
        order_breakdown.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        order_breakdown.setShowVerticalLines(false);
        order_breakdown.setSurrendersFocusOnKeystroke(true);
        order_breakdown.getTableHeader().setResizingAllowed(false);
        order_breakdown.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(order_breakdown);
        if (order_breakdown.getColumnModel().getColumnCount() > 0) {
            order_breakdown.getColumnModel().getColumn(0).setResizable(false);
            order_breakdown.getColumnModel().getColumn(0).setPreferredWidth(1);
            order_breakdown.getColumnModel().getColumn(1).setResizable(false);
            order_breakdown.getColumnModel().getColumn(1).setPreferredWidth(150);
        }

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(order_detail_tableNo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(order_detail_tableNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addContainerGap())
        );

        btn_reject.setBackground(new java.awt.Color(255, 0, 0));
        btn_reject.setForeground(new java.awt.Color(255, 255, 255));
        btn_reject.setToolTipText("");
        btn_reject.setRoundBottomLeft(30);
        btn_reject.setRoundBottomRight(30);
        btn_reject.setRoundTopLeft(30);
        btn_reject.setRoundTopRight(30);
        btn_reject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_rejectMouseClicked(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(255, 255, 255));
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("Reject");

        javax.swing.GroupLayout btn_rejectLayout = new javax.swing.GroupLayout(btn_reject);
        btn_reject.setLayout(btn_rejectLayout);
        btn_rejectLayout.setHorizontalGroup(
            btn_rejectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel42, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
        );
        btn_rejectLayout.setVerticalGroup(
            btn_rejectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
        );

        btn_accept.setBackground(new java.awt.Color(0, 204, 0));
        btn_accept.setForeground(new java.awt.Color(255, 255, 255));
        btn_accept.setToolTipText("");
        btn_accept.setRoundBottomLeft(30);
        btn_accept.setRoundBottomRight(30);
        btn_accept.setRoundTopLeft(30);
        btn_accept.setRoundTopRight(30);
        btn_accept.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_acceptMouseClicked(evt);
            }
        });

        jLabel45.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(255, 255, 255));
        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel45.setText("Accept");

        javax.swing.GroupLayout btn_acceptLayout = new javax.swing.GroupLayout(btn_accept);
        btn_accept.setLayout(btn_acceptLayout);
        btn_acceptLayout.setHorizontalGroup(
            btn_acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel45, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
        );
        btn_acceptLayout.setVerticalGroup(
            btn_acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
        );

        btn_done.setBackground(new java.awt.Color(255, 0, 0));
        btn_done.setForeground(new java.awt.Color(255, 255, 255));
        btn_done.setToolTipText("");
        btn_done.setRoundBottomLeft(30);
        btn_done.setRoundBottomRight(30);
        btn_done.setRoundTopLeft(30);
        btn_done.setRoundTopRight(30);
        btn_done.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_doneMouseClicked(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(255, 255, 255));
        jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel46.setText("Done");

        javax.swing.GroupLayout btn_doneLayout = new javax.swing.GroupLayout(btn_done);
        btn_done.setLayout(btn_doneLayout);
        btn_doneLayout.setHorizontalGroup(
            btn_doneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel46, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
        );
        btn_doneLayout.setVerticalGroup(
            btn_doneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel46, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btn_reject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btn_accept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btn_done, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_reject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_accept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_done, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel18.setFont(new java.awt.Font("Century Gothic", 1, 48)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("ORDER QUEUE");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        order_queue_tab.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 460, 1010));

        getContentPane().add(order_queue_tab, new org.netbeans.lib.awtextra.AbsoluteConstraints(1450, 0, 470, 1020));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background.jpg"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(-1, -6, 1920, 1030));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    public dashboard(String product_quantity, String product_name, String product_total_amount, Boolean has_addOns) {
        initComponents();
        
        System.out.println(product_quantity + product_name + product_total_amount); // working
        
//TODO: ADD TO CART
        DefaultTableModel model = (DefaultTableModel)list_orders.getModel();
        model.addRow(new Object[] { product_quantity, product_name, product_total_amount });
        model.fireTableDataChanged();
        
        productBundle.hide();
        
    }
    
    public void retrieveKitchenLogs(){
        if(! menuDefaultList().isEmpty()){
            try {
                ArrayList<User> userLogList = kitchenLogList();
                Object rowData[] = new Object[2];
                for(int position = 0; position < userLogList.size(); position++){
                    rowData[0] = userLogList.get(position).getLog_in();
                    rowData[1] = userLogList.get(position).getLog_out();
                }
                
                String in = rowData[0].toString();
                String out = rowData[1].toString();
                
                DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
                Date login = formatter.parse(in);
                Date logout = formatter.parse(out);
                
                if(login != null && logout != null) {
                    if(login.compareTo(logout) < 0 ){
                        //if login occured before logout able buttons
                        abler = true;
                        System.out.println("Kitchen is unavailable. You have access to these buttons.");
                    }

                    if(logout.compareTo(login) < 0 ){
                        //if logout occured before login disable buttons
                        abler = false;
                        System.out.println("Kitchen is logged in. You have no access to these buttons right now.");
                    }
                } else if (logout == null) {
                    //initial set up
                    abler = false;
                    System.out.println("Kitchen is logged in. You have no access to these buttons right now.");
                } else if (login == null  && login == null){
                    //no kitcen login yet
                    abler = true;
                    System.out.println("Kitchen is unavailable. You have access to these buttons.");
                }
            } catch (ParseException ex) {
                Logger.getLogger(dashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public ArrayList kitchenLogList(){
        ArrayList<User> userLogList = new ArrayList<User>();
        userLogList = DatabaseConnection.getInstance().retrieveKitchenLogs();
//        System.out.println(userLogList);
        return userLogList;
    }
    
    public void notifyCashierEvents(){
        ArrayList<Notification> notifications = new ArrayList<Notification>();
        notifications = DatabaseConnection.getInstance().notifyPanel();
        
        DefaultTableModel model = (DefaultTableModel)notification_table.getModel();
        model.setRowCount(0);
        if(!notifications.isEmpty()){
        Object rowData[] = new Object[2];
        for(int position = 0; position < notifications.size(); position++){
            rowData[0] = notifications.get(position).getTable_name();
            rowData[1] = notifications.get(position).getRequest_name();
            model.addRow(rowData);
        }
        }
    }
     
     
    public ArrayList orderListQueue(){
        ArrayList<Order> orderListQueue = new ArrayList<Order>();
        orderListQueue = DatabaseConnection.getInstance().retrieveOrderListQueue();
        return orderListQueue;
    }
    
    public ArrayList orderListBreakdown(String order_id){
        ArrayList<Order> orderListBreakdown = new ArrayList<Order>();
        orderListBreakdown = DatabaseConnection.getInstance().retrieveOrderBreakdownUsingOrderID(order_id);
        return orderListBreakdown;
    }

    public void addRowToListOrderQueueTable(){
        System.out.println("addRowToListOrderQueueTable");
        DefaultTableModel model = (DefaultTableModel)menu_list1.getModel();
        model.setRowCount(0);
        if(!orderListQueue().isEmpty()){
        ArrayList<Order> orderArrayList = orderListQueue();
        Object rowData[] = new Object[4];
        for(int position = 0; position < orderArrayList.size(); position++){
            rowData[0] = orderArrayList.get(position).getOrder_id();
            rowData[1] = orderArrayList.get(position).getCreated_by();
            rowData[2] = orderArrayList.get(position).getTotal_quantity();
            rowData[3] = orderArrayList.get(position).getOrder_status();
            model.addRow(rowData);
        }
        }
    }

    public void addRowToListOrderBreakdownTable(String order_id){
        DefaultTableModel model = (DefaultTableModel)order_breakdown.getModel();
        model.setRowCount(0);
        if(!orderListBreakdown(order_id).isEmpty()){
        ArrayList<Order> orderArrayList = orderListBreakdown(order_id);
        Object rowData[] = new Object[2];
        
            for(int position = 0; position < orderArrayList.size(); position++){
//            Order(String order_id,String quantity, String product_name)
            rowData[0] = orderArrayList.get(position).getQuantity();
            rowData[1] = orderArrayList.get(position).getProduct_name();
            model.addRow(rowData);
        
        }
        
        }
    }
    
    public static boolean isEmpty(JTable jTable) {
        if (jTable != null && jTable.getModel() != null) {
            return jTable.getModel().getRowCount()<=0?true:false;
        }
        return false;
    }
    
    public void addRowToTableList(){
        DefaultTableModel model = (DefaultTableModel)table_list.getModel();
        model.setRowCount(0);
        if(!tableListQueue().isEmpty()){
        ArrayList<Payment> paymentArrayList = tableListQueue();
        Object rowData[] = new Object[4];
        for(int position = 0; position < paymentArrayList.size(); position++){
            rowData[0] = paymentArrayList.get(position).getTable_no();
            rowData[1] = paymentArrayList.get(position).getTotal_amount();
            rowData[2] = paymentArrayList.get(position).getStatus();
            model.addRow(rowData);
        }
        }
    }
    
    public ArrayList tableListQueue(){
        ArrayList<Payment> paymentListQueue = new ArrayList<Payment>();
        paymentListQueue = DatabaseConnection.getInstance().returnUserNameAmountStatus();
        return paymentListQueue;
    }
    
    public ArrayList usernameQuery(){
        ArrayList<User> usernameList = new ArrayList<User>();
        usernameList = DatabaseConnection.getInstance().getUsername();
        return usernameList;
    }
    
//    public void addItemtoComboBox(){
//        
//        if(!usernameQuery().isEmpty()){
//            ArrayList<User> usernameList = usernameQuery();
//            Object rowData[] = new Object[4];
//            for(int position = 0; position < usernameList.size(); position++){
//                order_user.addItem(usernameList.get(position).getUser_name().toString());
//                order_detail_tableNo.addItem(usernameList.get(position).getUser_name().toString());
//            }
//        }
//    }
    
    
    
    private void menuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuMouseClicked
        jTabbedPane1.setSelectedIndex(1); 
        addDefaultRowToMenuList();
//        order_user.removeAllItems();
//        addItemtoComboBox();
        DefaultTableModel model = (DefaultTableModel) list_orders.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_menuMouseClicked

    private void menuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuMousePressed
        dashboard.setBackground(defaultColor);
        menu.setBackground(clickedColor);
        logout.setBackground(defaultColor);
    }//GEN-LAST:event_menuMousePressed

    private void dashboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardMouseClicked
        jTabbedPane1.setSelectedIndex(0); 
    }//GEN-LAST:event_dashboardMouseClicked

    private void dashboardMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardMousePressed
        dashboard.setBackground(clickedColor);
        menu.setBackground(defaultColor);
        logout.setBackground(defaultColor);
    }//GEN-LAST:event_dashboardMousePressed

    private void dashboardMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardMouseReleased
        
    }//GEN-LAST:event_dashboardMouseReleased

    private void menuMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuMouseReleased
        
    }//GEN-LAST:event_menuMouseReleased

    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseClicked
        login li = new login();
        if (li.isVisible()){
            li.setVisible(false);
            li.setVisible(true);
            close();
        } else {
            li.setVisible(true);
            close();
        }      
    }//GEN-LAST:event_logoutMouseClicked

    private void logoutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMousePressed
        dashboard.setBackground(defaultColor);
        menu.setBackground(defaultColor);
        logout.setBackground(clickedColor);
    }//GEN-LAST:event_logoutMousePressed

    private void btn_rejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_rejectMouseClicked
        // TODO add your handling code here:
        retrieveKitchenLogs();
        int rowCount = order_breakdown.getRowCount();
        if (rowCount > 0) {
            if (abler){
                System.out.println("clicked reject");
                if(user_id!=null && order_id!=null){
                    DatabaseConnection.getInstance().updateOrderStatusByOrderID("REJECTED", user_id, order_id);
                    addRowToListOrderQueueTable();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter your order!", "No Orders Found.", JOptionPane.PLAIN_MESSAGE);
        }
        
        
    }//GEN-LAST:event_btn_rejectMouseClicked

    private void btn_acceptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_acceptMouseClicked
        // TODO add your handling code here:
        retrieveKitchenLogs();
        
        int rowCount = order_breakdown.getRowCount();
        if (rowCount > 0) {
            if (abler){
                System.out.println("clicked accept");
                if(user_id!=null && order_id!=null){
                    DatabaseConnection.getInstance().updateOrderStatusByOrderID("PREPARING", user_id, order_id);
                    addRowToListOrderQueueTable();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter your order!", "No Orders Found.", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_btn_acceptMouseClicked

    private void btn_doneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_doneMouseClicked
        // TODO add your handling code here:
        retrieveKitchenLogs();
        
        int rowCount = order_breakdown.getRowCount();
        if (rowCount > 0) {
            if(abler){
                if(user_id!=null && order_id!=null){
                    System.out.println("clicked complete");
                    DatabaseConnection.getInstance().updateOrderStatusByOrderID("COMPLETED", user_id, order_id);
                    addRowToListOrderQueueTable();
                }
            }
            else {
                System.out.println("DISABLED.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter your order!", "No Orders Found.", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_btn_doneMouseClicked
    
//    private String order_id;
    
    private void menu_list1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_list1MouseClicked
        DefaultTableModel model = (DefaultTableModel) menu_list1.getModel();
	int selectedRowIndex = menu_list1.getSelectedRow();
        String order_id = model.getValueAt(selectedRowIndex, 0).toString();
        this.order_id = order_id;
        //debug order_id
//            System.out.println(order_id);
            //populate here
            addRowToListOrderBreakdownTable(order_id);
         
        order_detail_tableNo.setSelectedItem(model.getValueAt(selectedRowIndex, 1));
    }//GEN-LAST:event_menu_list1MouseClicked
    public ArrayList menuList(String productCategory){
        ArrayList<ProductInfo> orderMenuList = new ArrayList<ProductInfo>();
        orderMenuList = DatabaseConnection.getInstance().retrieveProductsAccordingToCategory(productCategory);
        return orderMenuList;
    }

    public void addRowToMenuList(String productCategory){
        DefaultTableModel model = (DefaultTableModel)menu_list.getModel();
        model.setRowCount(0);
        Object rowData[] = new Object[3];
        if(! menuList(productCategory).isEmpty()){
        ArrayList<ProductInfo> menuArrayList = menuList(productCategory);
        
        for(int position = 0; position < menuArrayList.size(); position++){
            rowData[0] = menuArrayList.get(position).getProduct_name();
            rowData[1] = menuArrayList.get(position).getProduct_price();
            rowData[2] = menuArrayList.get(position).getBundle();
            model.addRow(rowData);
        }
        }
    }
    
    public ArrayList menuDefaultList(){
        ArrayList<ProductInfo> orderMenuList = new ArrayList<ProductInfo>();
        orderMenuList = DatabaseConnection.getInstance().retrieveAllProducts();
        return orderMenuList;
    }
    
    public void addDefaultRowToMenuList(){
        DefaultTableModel model = (DefaultTableModel)menu_list.getModel();
        model.setRowCount(0);
        if(! menuDefaultList().isEmpty()){
        ArrayList<ProductInfo> menuArrayList = menuDefaultList();
        Object rowData[] = new Object[3];
        for(int position = 0; position < menuArrayList.size(); position++){
            rowData[0] = menuArrayList.get(position).getProduct_name();
            rowData[1] = menuArrayList.get(position).getProduct_price();
            rowData[2] = menuArrayList.get(position).getBundle();
            model.addRow(rowData);
        }
        }
    }
    
    public Object getProductId() {
        Object productId = null;
        if(! menuDefaultList().isEmpty()){
        ArrayList<Product> menuArrayList = menuDefaultList();
        
        productId = menuArrayList.get(0).getProduct_id();
        
        }
        
        return productId;
    }
    
    private void table_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_listMouseClicked
        DefaultTableModel model = (DefaultTableModel) table_list.getModel();
        int selectedRowIndex = table_list.getSelectedRow();
        String table_no = model.getValueAt(selectedRowIndex, 0).toString();
//        String amount = model.getValueAt(selectedRowIndex, 1).toString();
        
        view_cart viewCart = new view_cart(table_no);
        if (viewCart.isVisible()){
            viewCart.setVisible(false);
            viewCart.setVisible(true);
        } else {
            viewCart.setVisible(true);
        }
    }//GEN-LAST:event_table_listMouseClicked

    //TODO: CHECKOUT
    private void btn_checkoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_checkoutMouseClicked
        String username = order_user.getSelectedItem().toString();
        int rowCount = list_orders.getRowCount();
        
        if(rowCount > 0) {
            if(username.equals("take-out") || username.equals("dine-in")){
//                username = "cashier";
                view_cart viewCart = new view_cart(username, order_total_amount.getText());
                if (viewCart.isVisible()){
                    viewCart.setVisible(false);
                    viewCart.setVisible(true);
                } else {
                    viewCart.setVisible(true);
                }
            } 
        } else {
            JOptionPane.showMessageDialog(null, "Please enter your order!", "No Orders Found.", JOptionPane.PLAIN_MESSAGE);
        }
                
    }//GEN-LAST:event_btn_checkoutMouseClicked
    
    
    public static void checkout(String cashier, String takeOut) {
        DefaultTableModel model = (DefaultTableModel) list_orders.getModel();
        int rowCount = Integer.valueOf(model.getRowCount());
        //making sure that the table is not empty
        if(rowCount >= 0){
            
            //adding up all the prices
            Double total_temp = Double.parseDouble(order_total_amount.getText());
            String total = String.format("%.2f", total_temp);
            
            
            System.out.println("THIS IS THE TOTAL" + total);
            int orderID = DatabaseConnection.getInstance().insertOrder(cashier, total);
            
            
            for(int position = 0; position < rowCount; position++){
                String quantityColumn = model.getValueAt(position, 0).toString();
                String product_id = null, quantity = null, has_addons=null, flavors = null, product_name; 
                
                if (quantityColumn != "-") {
                    quantity = model.getValueAt(position, 0).toString();
                    product_name = model.getValueAt(position, 1).toString();
                    System.out.println("product_name : " + product_name);
                    
                    if(!getProductInfoQuery(product_name).isEmpty()){
                        ArrayList<ProductInfo> productInfo = getProductInfoQuery(product_name);

                        product_id = productInfo.get(0).getProduct_id().toString();
                        System.out.println("product ID : " + product_id);
                    }
                    position ++;
                }
                
                if (position < rowCount ){
                    quantityColumn = model.getValueAt(position, 0).toString();
                    if(quantityColumn.equals("-")){

                        if(model.getValueAt(position, 1).toString().contains("Shawarma")){
                            has_addons = model.getValueAt(position, 1).toString();
                            System.out.println(has_addons);
                        }
                        else { 
                            flavors = model.getValueAt(position, 1).toString();
                        }
                    } else {
                        position --;
                    }
                }
                
                Boolean product_bundle = productBundle.isSelected();
                Boolean addons;
                
                if (has_addons != null){
                    addons = true;
                } else { addons = false; }
                
                
                System.out.println("addons : " + addons);
                System.out.println("product_bundle dashboard : " + product_bundle);
                
                
                System.out.println("INSERT ORDER STATUS : "+ orderID + " " + product_id + " " + quantity + " " + product_bundle + " " + addons + " " + flavors);
                
                DatabaseConnection.getInstance().insertOrderItems(orderID, product_id, quantity, product_bundle, addons, flavors);
            }
            
//            DatabaseConnection.getInstance().insertPayment(null, total, null, null, username, null);
            model.setRowCount(0);
            order_total_amount.setText("-");
            
            
        } else {
            JOptionPane.showMessageDialog(null, "Please enter your order!", "No Orders Found.", JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    public static ArrayList getProductInfoQuery(String product_name){
        ArrayList<ProductInfo> productInfo = new ArrayList<ProductInfo>();
        productInfo = DatabaseConnection.getInstance().getProductInfo(product_name);
        return productInfo;
    }
    
    private void icon_bowlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icon_bowlMouseClicked

        shawarma_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        rice_bowl_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.red));
        chicken_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        drinks_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        add_ons_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));

        addRowToMenuList("bowl");
    }//GEN-LAST:event_icon_bowlMouseClicked

    private void icon_chickenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icon_chickenMouseClicked
        shawarma_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        rice_bowl_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        chicken_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.red));
        drinks_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        add_ons_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        addRowToMenuList("wings");
    }//GEN-LAST:event_icon_chickenMouseClicked

    private void icon_DrinksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icon_DrinksMouseClicked
        shawarma_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        rice_bowl_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        chicken_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        drinks_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.red));
        add_ons_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        addRowToMenuList("beverage");
    }//GEN-LAST:event_icon_DrinksMouseClicked

    private void btn_shawarma_categoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_shawarma_categoryMouseClicked

    }//GEN-LAST:event_btn_shawarma_categoryMouseClicked

    private void icon_shawarmaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icon_shawarmaMouseClicked
        shawarma_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.red));
        rice_bowl_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        chicken_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        drinks_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        add_ons_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        addRowToMenuList("shawarma");
    }//GEN-LAST:event_icon_shawarmaMouseClicked

    private void menu_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_listMouseClicked
        DefaultTableModel model = (DefaultTableModel) menu_list.getModel();
        int selectedRowIndex = menu_list.getSelectedRow();

        String product_name = model.getValueAt(selectedRowIndex, 0).toString();
        String product_price = model.getValueAt(selectedRowIndex, 1).toString();
        
        
        product_details productDetails = new product_details(product_name, product_price);
        if (productDetails.isVisible()){
            productDetails.setVisible(false);
            productDetails.setVisible(true);
        } else {
            productDetails.setVisible(true);
        }
    }//GEN-LAST:event_menu_listMouseClicked

    private void icon_add_onsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_icon_add_onsMouseClicked
        shawarma_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        rice_bowl_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        chicken_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        drinks_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.white));
        add_ons_border_selected.setBorder(BorderFactory.createMatteBorder(1, 5, 1, 1, Color.red));
        addRowToMenuList("additional");
    }//GEN-LAST:event_icon_add_onsMouseClicked

    private void btn_refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_refreshMouseClicked
        addRowToTableList();
    }//GEN-LAST:event_btn_refreshMouseClicked

    private void notification_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notification_tableMouseClicked
        int result =JOptionPane.showConfirmDialog(this,"Are you sure that this concern has been resolved?", "Assistance Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            DefaultTableModel model = (DefaultTableModel) notification_table.getModel();
            if(model.getRowCount()>0){
                int selectedRowIndex = notification_table.getSelectedRow();
                
                String datetime=null;
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");  
                LocalDateTime now = LocalDateTime.now();  
                datetime= dtf.format(now);
                
                String description = model.getValueAt(selectedRowIndex, 1).toString();
                String user_name = model.getValueAt(selectedRowIndex, 0).toString();
                if (description.equals("Assistance Request")) {
                    DatabaseConnection.getInstance().removeNotification(datetime.toString(), user_name);
                   
                }
                
                 model.removeRow(selectedRowIndex);

            }
            
//            JOptionPane.showMessageDialog(null, "Successfully deleted " + username, "Account Deletion Successful", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_notification_tableMouseClicked

    private void remove_orderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remove_orderMouseClicked
        DefaultTableModel model = (DefaultTableModel) list_orders.getModel();
        int selectedRowIndex = list_orders.getSelectedRow();
        
        if (selectedRowIndex >= 0) {
            model.removeRow(selectedRowIndex);
        } else {
            JOptionPane.showMessageDialog(null, "Please select the order you wish to delete.", "Order Selection is missing!", JOptionPane.PLAIN_MESSAGE);
        }
        
    }//GEN-LAST:event_remove_orderMouseClicked
    
    static Double price = 0.00;
    
    public static void AddRowToListOrdersTable(String dataRow_Qty,String dataRow_Product,String dataRow_Price, Boolean product_bundle, Boolean has_addOns, String flavors){
        /*
        Pwede ka pa magintroduce ng parameters and variables dito para like for example,
        flavors, hasaddons, and bundle 
        para maipasa mo sa checkout
        sleep muna q mwa lab yu <<<333
        */
        productBundle.setSelected(product_bundle);
        price += Double.valueOf(dataRow_Price);
        
        DefaultTableModel model = (DefaultTableModel) list_orders.getModel();
        Object rowData[] = new Object[3];
        rowData[0] = dataRow_Qty;
        rowData[1] = dataRow_Product;
        rowData[2] = dataRow_Price;
        model.addRow(rowData);
        
        
        order_total_amount.setText(String.format("%.2f", price));
        
        if (has_addOns){
            Object rowDataDetail[] = new Object[3];
            rowDataDetail[0] = "-";
            rowDataDetail[1] = "Shawarma All Meat";
            rowDataDetail[2] = "-";
            model.addRow(rowDataDetail);
        } else if (!flavors.isEmpty()) {
            Object rowDataDetail[] = new Object[3];
            rowDataDetail[0] = "-";
            rowDataDetail[1] = flavors;
            rowDataDetail[2] = "-";
            model.addRow(rowDataDetail);
        }
        
        System.out.println("Order successfully passed to dashboard.");
    }
    
    public void close(){
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dashboard().setVisible(true);
                
            }
        });
    }
    
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel add_ons_border_selected;
    private javax.swing.JLabel background;
    private roundPanel btn_accept;
    private roundPanel btn_add_ons_category;
    private roundPanel btn_checkout;
    private roundPanel btn_chicken_category;
    private roundPanel btn_done;
    private roundPanel btn_drinks_category;
    private javax.swing.JButton btn_refresh;
    private roundPanel btn_reject;
    private roundPanel btn_rice_bowl_category;
    private roundPanel btn_shawarma_category;
    private javax.swing.JPanel chicken_border_selected;
    private javax.swing.JPanel dashboard;
    private javax.swing.JPanel dashboard_tab;
    private javax.swing.JPanel drinks_border_selected;
    private javax.swing.JLabel icon_Drinks;
    private javax.swing.JLabel icon_add_ons;
    private javax.swing.JLabel icon_bowl;
    private javax.swing.JLabel icon_chicken;
    private javax.swing.JLabel icon_shawarma;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel label_add_ons;
    private javax.swing.JLabel label_chicken;
    private javax.swing.JLabel label_drinks;
    private javax.swing.JLabel lbl_shawarma;
    private static javax.swing.JTable list_orders;
    private javax.swing.JPanel logout;
    private javax.swing.JPanel menu;
    private javax.swing.JTable menu_list;
    private javax.swing.JTable menu_list1;
    private javax.swing.JPanel menu_tab;
    private javax.swing.JTable notification_table;
    private javax.swing.JTable order_breakdown;
    private javax.swing.JComboBox<String> order_detail_tableNo;
    private javax.swing.JPanel order_queue_tab;
    private static javax.swing.JLabel order_total_amount;
    private static javax.swing.JComboBox<String> order_user;
    private javax.swing.JLabel place_order;
    private static javax.swing.JRadioButton productBundle;
    private javax.swing.JLabel remove_order;
    private javax.swing.JPanel rice_bowl_border_selected;
    private javax.swing.JPanel shawarma_border_selected;
    private javax.swing.JPanel sidePane;
    private javax.swing.JTable table_list;
    // End of variables declaration//GEN-END:variables


    
}
